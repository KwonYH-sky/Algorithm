/*
2706. 초콜릿 2개 구매

상점에 있는 다양한 초콜릿의 가격을 나타내는 정수 배열 가격이 주어집니다. 또한 초기 금액을 나타내는 단일 정수의 돈도 주어집니다.

여러분은 음수가 아닌 남은 돈이 남도록 정확히 두 개의 초콜릿을 구입해야 합니다. 구입한 초콜릿 두 개 가격의 합을 최소화하고 싶습니다.

두 개의 초콜릿을 구입하고 남은 금액을 반환합니다. 빚을 지지 않고 초콜릿 두 개를 살 수 있는 방법이 없다면 돈을 반환합니다. 남은 금액은 음수가 아닌 금액이어야 한다는 점에 유의하세요.
 

예제 1:
입력: 가격 = [1,2,2], 돈 = 3
Output: 0
설명: 설명: 가격이 각각 1과 2 단위인 초콜릿을 구입합니다. 이후에는 3 - 3 = 0 단위의 돈을 갖게 됩니다. 따라서 0을 반환합니다.

예제 2:
입력: 가격 = [3,2,3], 돈 = 3
Output: 3
설명: 설명: 빚을 지지 않고는 초콜릿 2개를 살 수 없으므로 3개를 반환합니다.
 

제약 조건이 있습니다:

2 <= prices.length <= 50
1 <= prices[i] <= 100
1 <= money <= 100
*/

class Solution {
    public int buyChoco(int[] prices, int money) {
        Arrays.sort(prices);
        int choco = prices[0] + prices[1];

        return choco > money ? money : money - choco;
    }
}