/*
트릭 플라워
 
시간 제한	메모리 제한
1 초	1024 MB	
문제
왼쪽 아래의 각이 직각인 직각이등변삼각형 모양의 정원이 있다. 
정원의 왼쪽 아래 꼭지점의 좌표를 (0, 0)이라 하고, 길지 않은 변의 길이를 R이라고 하자. 
다음은 R = 6인 정원의 모습이다.


정원에 트릭 플라워를 심으면 1초가 지날 때마다 한 송이씩 새로운 꽃이 피어난다. 
트릭 플라워의 좌표를 (x0, y0)라 하고, t초가 지났을 때 피어나는 꽃의 좌표를 (xt, yt)라고 하자. 
좌표 (xt, yt)를 알고 있다면 (xt + 1, yt + 1)는 다음과 같이 알아낼 수 있다.

- 부등식 (xt + 1) + (yt + 1) < R 이 참이라면 xt + 1과 yt + 1은 각각 xt + 1, yt + 1 이다.
- 그렇지 않다면 xt + 1과 yt + 1은 각각 xt ÷ 2, yt ÷ 2 이다.
- 단 계산 과정에서 소수점은 모두 버리며, 여러 송이의 꽃이 한 좌표에 필 수도 있다.

비어있는 정원에서 좌표 (a, b)에 트릭 플라워를 심었을 때, 
적어도 몇 초가 지나야 한 좌표에 두 송이의 꽃이 피어있게 되는지 알아보자. 
특히 트릭 플라워도 꽃으로 취급하며, 트릭 플라워로 인해 피어나는 꽃은 
모두 트릭 플라워가 아닌 일반적인 꽃이다.

입력
첫째 줄에 a와 b가 공백을 구분으로 주어진다.

둘째 줄에 R이 주어진다.

출력
비어있는 정원에서 좌표 (a, b)에 트릭 플라워를 심었을 때 
적어도 몇 초가 지나야 한 좌표에 두 송이의 꽃이 피어있게 되는지 출력한다.

제한
​​1 ≤ R ≤ 10^3
0 ≤ a < R
0 ≤ b < R
a + b < R
입력으로 주어지는 수는 모두 정수다.
예제 입력 1 
0 2
6
예제 출력 1 
7
예제 입력 2 
4 1
6
예제 출력 2 
8
예제 입력 3 
112 445
906
예제 출력 3 
2222
*/

#include <bits/stdc++.h>

using namespace std;

int main() {
    int a, b, R;
    cin >> a >> b >> R;

    int cnt = 0;
    vector<vector<bool>> visited(R, vector<bool>(R, false));

    do {
        visited[a][b] = true;
        cnt++;
        if (a + b + 2 < R) {
            a = a + 1;
            b = b + 1;
        } else {
            a = a / 2;
            b = b / 2;
        }
    } while (!visited[a][b]);

    cout << cnt << endl;

    return 0;
}